from django.db import models
from django.forms import ModelForm, DateField, ChoiceField, CharField
from datetime import date
from fracas_site import settings
from django.contrib.admin.widgets import AdminDateWidget
import datetime
import uuid
from django.forms.models import ModelChoiceIterator, ModelMultipleChoiceField
from django.forms.widgets import MultipleHiddenInput


# Create your models here.


class ModelArrowCharField(models.CharField):
    arrow = True


class CorrectiveAction(models.Model):
    defect = models.ForeignKey('Defect', on_delete=models.CASCADE)
    corrective_action_id = models.AutoField(primary_key=True)
    corrective_action_owner = models.CharField(max_length=550, blank=True)
    corrective_action_description = models.TextField(blank=True)
    corrective_action_update = models.TextField(blank=True)
    corrective_action_status = models.CharField(max_length=15, blank=True)

class FailureMode(models.Model):
    mode_id = models.CharField(max_length=15, unique=True)
    mode_description = models.CharField(max_length=100, null=True, blank=True)
    start_date = models.DateField(null=True, blank=True)
    end_date = models.DateField(null=True, blank=True)
    asset_type = models.CharField(max_length=550, blank=True)

    class Meta:
        verbose_name_plural = '(3) Failure Mode Identification'


    def __str__(self):
        return self.mode_id

class FailureData(models.Model):
    failure_id = models.IntegerField(null=True, blank=True)
    asset_config_id = models.ForeignKey('Asset', on_delete=models.CASCADE, to_field='asset_config_id', null=True, blank=True)
    event_description = models.TextField(null=True, blank=True)
    mode_id = models.ForeignKey('FailureMode', on_delete=models.SET_NULL, null=True, blank=True)
    mode_description = models.CharField(max_length=100, null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    time = models.CharField(max_length=15, null=True, blank=True)
    detection = models.CharField(max_length=15, null=True, blank=True)
    service_delay = models.IntegerField(default=0)
    immediate_investigation = models.TextField(null=True, blank=True)
    failure_type = models.CharField(max_length=15, null=True, blank=True)
    safety_failure = models.CharField(max_length=5, null=True, blank=True)
    hazard_id = models.CharField(max_length=6, null=True, blank=True)
    cm_description = models.TextField(null=True, blank=True)
    replaced_asset_config_id = models.CharField(max_length=15, null=True, blank=True)
    cm_start_date = models.DateField(null=True, blank=True)
    cm_start_time = models.CharField(max_length=15, null=True, blank=True) 
    cm_end_date = models.CharField(max_length=15, null=True, blank=True)
    cm_end_time = models.CharField(max_length=15, null=True, blank=True)
    oem_failure_reference = models.TextField(null=True, blank=True)
    defect = models.ForeignKey('Defect', on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return ' '

    class Meta:
        verbose_name_plural = '(1) Failure Data Collection'


class Asset(models.Model):
    asset_config_id = models.CharField(max_length=50, unique=True)
    location_id = models.TextField()
    location_description = models.TextField()
    asset_serial_number = models.CharField(max_length=20)
    asset_type = models.CharField(max_length=20)
    asset_description = models.TextField()
    software_version = models.CharField(max_length=15)
    software_description = models.TextField()
    asset_status = models.CharField(max_length=15)

    class Meta:
        verbose_name_plural = '(2) Asset Register'

    def __str__(self):
        return self.asset_config_id

class Defect(models.Model):
    start_date = models.DateField(null=True, blank=True)
    end_date = models.DateField(null=True, blank=True)
    asset_type = models.CharField(max_length=550, blank=True)
    defect_id = models.AutoField(primary_key=True)
    defect_description = models.TextField(blank=True)
    defect_open_date = models.DateField(null=True, blank=True)
    defect_closed_date = models.DateField(null=True, blank=True)
    investigation = models.TextField(blank=True)
    defect_status = models.CharField(max_length=15, blank=True)
    defect_status_remarks = models.TextField(blank=True)
    oem_defect_reference = models.TextField(blank=True)

    class Meta:
        verbose_name_plural = '(4) FRACAS Defect Identification'

    def start_date_to_string(self):
        if self.start_date is None:
            return ''
        else:
            return self.start_date.value_to_string(self.start_date, '%d-%m-%y') + '-'

    def end_date_to_string(self):
        if self.end_date is None:
            return ''
        else:
            return self.end_date.value_to_string(self.start_date ,'%d-%m-%y')

    def __str__(self):
        return (str(self.defect_id) + ': ' + str(self.defect_description))

class RootCause(models.Model):
    root_cause_id = models.AutoField(primary_key=True)
    asset_type = models.CharField(max_length=550, blank=True)
    defect = models.ForeignKey('Defect', on_delete=models.CASCADE, null=True, blank=True, unique=True)
    immediate_cause = ModelArrowCharField(max_length=100, blank=True)
    leading_reasons = ModelArrowCharField(max_length=100, blank=True)
    root_cause_description = models.CharField(max_length=100, blank=True)
    rca_workshop_date = models.DateField(null=True, blank=True)
    root_cause_status = models.CharField(max_length=15, blank=True)

    class Meta:
        verbose_name_plural = '(5) Root Cause Analysis'


class DefectDiscussion(models.Model):
    defect_discussion_id = models.AutoField(primary_key=True)
    meeting_date = models.DateField(null=True, blank=True, auto_now_add=True)
    attendees = models.ManyToManyField('EmployeeMaster', blank=True)
    review_board = models.ForeignKey('ReviewBoard', on_delete=models.CASCADE)
    defect = models.ForeignKey('Defect', on_delete=models.CASCADE, null=True, blank=True)

    def get_asset_type(self):
        if hasattr(self, 'review_board'):
            return self.review_board.asset_type
    
    def __str__(self):
        return ''
        


class Action(models.Model):
    action_id = models.AutoField(primary_key=True)
    action_description = models.CharField(max_length=100, blank=True)
    action_owner = models.CharField(max_length=100, blank=True)
    action_status = models.CharField(max_length=15, blank=True)
    action_due_date = models.DateField(null=True, blank=True)
    progress_log = models.CharField(max_length=100, blank=True)
    defect_discussion_id = models.ForeignKey('DefectDiscussion', on_delete=models.CASCADE, to_field='defect_discussion_id', null=True, blank=True)
    
    def __str__(self):
        return ''


class ReviewBoard(models.Model):
    asset_type = models.CharField(max_length=550, blank=True)
    from_date = models.DateField(null=True, blank=True)
    to_date = models.DateField(null=True, blank=True)
    meeting_date = models.DateField(null=True, blank=True, auto_now_add=True)
    meeting_id = models.CharField(max_length=15, blank=True, null=True)

    class Meta:
        verbose_name_plural = '(6) FRACAS Review'

    def save(self, *args, **kwargs):
        if not self.meeting_id:
            self.meeting_id = self.id
        super(ReviewBoard, self).save(*args, **kwargs)

class EmployeeMaster(models.Model):
    employee_id =  models.CharField(max_length=15, blank=True, null=True)
    name = models.CharField(max_length=100, blank=True)
    designation = models.CharField(max_length=100, blank=True)

    def __str__(self):
        if self.employee_id and self.name:
            return self.employee_id + ': ' + self.name
        elif self.employee_id and not self.name:
            return self.employee_id
        elif self.name and not self.employee_id:
            return self.name
        else:
            return ''


    class Meta:
        verbose_name_plural = 'Employee Master'

class PBSMaster(models.Model):
    system = models.CharField(max_length=100, blank=True)
    subsystem = models.CharField(max_length=100, blank=True)
    product_id = models.CharField(max_length=15, blank=True)
    product_description = models.CharField(max_length=100, blank=True)
    asset_type = models.CharField(max_length=550, blank=True)
    asset_description = models.CharField(max_length=550, blank=True)
    MTBF = models.FloatField(default=0)
    MTBSAF = models.FloatField(default=0)
    MART = models.FloatField(default=0)
    asset_quantity = models.IntegerField(default=0)

    class Meta:
        verbose_name_plural = 'PBS Master'

